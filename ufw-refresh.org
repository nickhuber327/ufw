#+TITLE: ufw-refresh.ros
#+AUTHOR: Nicholas Huber
#+STARTUP: showall
#+PROPERTY: header-args:lisp :tangle /home/nick/Programming/Clisp/scripts/ufw/ufw-refresh.ros

* Refresh the IPs in the UFW by hostnames
** Roswell Header stuff
#+begin_src lisp
  #!/bin/sh
  #|-*- mode:lisp -*-|#
  #|
  exec ros -Q -- $0 "$@"                  ; ; ; ; ; ; ; ; ; ;
  |#

#+end_src

** Info Block
#+begin_src lisp
  ;;;; UFW refresh
  ;;;  The purpose of this script is to check refresh which hosts are allowed to access a machine
  ;;;  by checking their current IPs, using hostnames, and checking them against IPs currently allowed access
  ;;;  in UFW.
  ;;;  Script must be run as ROOT user
  ;;;  Enter list of hostnames and ports as HOST1:PORT HOST2:PORT2
#+end_src

** Roswell init stuff
voodoo magic:

#+begin_src lisp
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '() :silent t)
  )

(defpackage :ros.script.ufw-refresh.3876675733
  (:use :cl))
(in-package :ros.script.ufw-refresh.3876675733)
#+end_src

** +Hostnames and ports+
Lists of the hostnames and their ports to check:

#+begin_src lisp :tangle nil
  ;(defparameter *hostname* "jumpserver")
  ;(defparameter *port* "22")
#+end_src

** Get Current IPs
Functions for getting the current IPs based off of hostname
~get-current-ip~ takes hostname and calls ~GETENT AHOSTS~ and parses the result to get its current ip

#+begin_src lisp
  (defun get-current-ip (hostname)
   "Get the current IP of a host using the hostname by calling GETENT"
    (car (uiop:split-string (uiop:run-program (uiop:strcat "/usr/bin/getent ahosts " hostname) :output :string))))
#+end_src

** Get Old IPs
Functions for grabbing the IPs currently in UFW's rules
~get-old-ip~ calls ~UFW STATUS~ to get the IPs currently in the rules
*** *TODO* filter out the IP addresses
     +1) Try for regex, ~^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$~, simple regex for IPs+
     1) Split results of ~ufw status~ with ~str:lines~ (load from ~cl-str~)
     2) To filer out header stuff and last blank-line:
        ~(butlast (cddddr stuff))~
    +3) *TODO* filer out whitespace+
     3) *TODO* filter out empty +sublists+ strings in list
        progress:
        ~(remove-if #'(lambda (c) (not (find #\space c :test-not #'eql))) (uiop:split-string (car contents) :separator " "))~
     4) Grab the last element of each sublist after filtering out all the extra whitespace elements
        ~(last (remove-if #'(lambda (c) (not (find #\space c :test-not #'eql))) (uiop:split-string (car contents) :separator " "))~
     5) *TODO* Loop over each sublist, probably from main function (return list of IPs)
        
#+begin_src lisp
  (defun get-old-ip ()
   "Get the old IP of a host by taking the last element of a list of the output of UFW\'s status"
    (cdr (uiop:split-string (uiop:run-program "/usr/sbin/ufw status"))))
#+end_src

** Delete Old Rules
Functions to delete old UFW rules
~delete-old-rule~ takes an IP and a Port and calls UFW with ~UFW DLETE~ to remove that rule based on the specific IP and Port

#+begin_src lisp
  (defun delete-old-rule (ip port)
   "Delete the old rule for an allowing an IP"
    (uiop:run-program (uiop:strcat "/usr/sbin/ufw delete allow from " ip " to any port " port) :output :string))
#+end_src

** Define New Rules
Functions used to define new UFW rules
~add-new-rule~ takes an IP and Port and calles ~UFW INSERT~ to insert a new rule allowing that IP on that Port

#+begin_src lisp
  (defun add-new-rule (ip port)
   "Add a new rule allowing current IP access"
    (uiop:run-program (uiop:strcat"/usr/sbin/ufw insert 1 allow from " ip " to any port " port) :output :string))
#+end_src

** Replace IPs
Functions used to delete old UFW rules and define new ones
~replace-ip~ takes the old IP and new IP and calls the respective functions to delete and add new rules
*TODO*: possbily replace rules regardless of whether or not they match?

#+begin_src lisp
  (defun replace-ip (new-ip old-ip port)
   "Replace old IP by calling DELETE-OLD-JUMPSERVER and ADD-NEW-JUMPSERVER"
    (cond ((string= new-ip old-ip)
           (progn
             (delete-old-rule old-ip port)
             (add-new-rule new-ip port)))))
#+end_src

** Main Function
Main function to run program
*TODO* Modify loop to loop over both new and old IPs
     1) Remove ~get-old-ip~ call from ~replace-ip~ function call
     2) Place call to ~get-old-ip~ in ~loop~ to iterate over list of current and old IPs
        *TODO* ^^^ figure out how to do aforementioned
#+begin_src lisp
  (defun main (&rest hostname-port-list)
    (loop for hostname-port in hostname-port-list do
          (replace-ip (get-current-ip (car (uiop:split-string hostname-port :separator ":")))
                      (get-old-ip)
                      (cdr (uiop:split-string hostname-port :separator ":")))))
#+end_src

** Roswell Footer Info
#+begin_src lisp
  ;;; vim: set ft=lisp lisp:
#+end_src
